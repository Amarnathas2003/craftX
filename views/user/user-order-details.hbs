{{>new-user-header}}


<div>
    <a href="/" class="btn border border-dark mt-4 btn-primary" style="margin-left: 980px;">Buy Products</a>
</div>

{{#if orderDetails}}
{{#each orderDetails}}
{{#each this.orderItems}}
{{#unless this.is_Canceled}}
<input type="text" name="orderID" value="{{../this._id}}" hidden>
<div class="container mt-5 mb-5">
    <div class="d-flex justify-content-center row">
        <div class="col-md-10">
            <div class="row p-2 bg-white border rounded">

                <div class="col-md-3 mt-1">
                    {{#each this.primaryImages}}
                    <img class="img-fluid img-responsive rounded product-image mt-3" src="/uploads/{{this}}"
                        style="width: 100px; height: 100px;margin-left: 20px;">
                    {{/each}}
                </div>

                <div class="col-md-6 mt-1">
                    <h5>{{this.productName}}</h5>
                    <div class="d-flex flex-row">
                        <div class="ratings mr-2"><i class="fa fa-star"></i><i class="fa fa-star"></i><i
                                class="fa fa-star"></i><i class="fa fa-star"></i></div><span>310</span>
                    </div>
                    <div class="mt-1 mb-1 spec-1">
                        <span>Quantity: {{this.quantity}}</span>
                        <span class="dot"></span>
                        </span><span><br></span>
                    </div>
                    <button class="btn border border-dark status-button mt-2" data-status="{{this.orderStatus}}"
                        id="statusBtn-{{this._id}}">
                        <small>{{this.orderStatus}}</small>
                    </button>



                    {{#unless this.is_return}}
                    {{#unless this.return_expired}}
                    <a onclick="returnItem('{{../this._id}}','{{this.productID}}')"
                        class="returnItem btn border border-dark mt-2" data-product-id="{{this._id}}"
                        style="display: none;">Return Item</a>
                    {{/unless}}
                    {{/unless}}


                    {{#if this.is_Delivered}}
                    {{#unless this.return_expired}}
                    <div>
                        <small>Order Date : {{this.order_item_date}}</small>
                        <br>
                        <small>Note : Return Policy Is Only Available Within 2 Weeks From Order Date</small>
                    </div>
                    {{/unless}}
                    {{/if}}


                    <input type="text" value="{{this.productID}}" hidden name="" id="">
                </div>

                <div class="align-items-center align-content-center col-md-3 border-left">
                    <div class="d-flex flex-row align-items-center">

                        <h4 class="mr-1" style="color: green; margin-left: 75px;">{{this.unitPrice}}</h4>

                        {{!-- invoice download route --}}
                        {{#if this.is_Delivered }}
                        {{#unless this.is_return}}
                        <div style="margin-left: 50px;" class="invoicePrinticon">
                            <a id="invoiceLink-{{../this._id}}"
                                href="/profile/my-orders/getInvoice?orderId={{../this._id}}&productId={{this.productID}}">
                                <span class="material-symbols-outlined" style="font-size: 30px;">
                                    print
                                </span>
                            </a>
                        </div>
                        {{/unless}}
                        {{/if}}
                    </div>



                    {{!-- Taking the id which is each products unique id in orderItems array --}}
                    <input type="text" value="{{./this._id}}" name="proUniqueID" hidden id="">

                    {{#if this.is_return}}
                    <div>
                        <h6 class="text-danger orderCancelText" style="margin-left: 55px;">Order Returned</h6>
                    </div>
                    {{/if}}

                    <div class="d-flex flex-column mt-4 btn btn-sm">
                        <a href="/view-product/{{this.productID}}">
                            <button class="btn btn-primary btn-sm" type="button">Details</button>
                        </a>


                        {{#if is_Delivered}}
                        <div class="mt-2">
                            <a href="/profile/my-orders/rate-product/{{this.productID}}">Rate and Review </a>
                        </div>
                        {{/if}}

                        {{#unless this.is_Delivered}}
                        <button class="btn btn-danger btn-sm cancel-button mt-2" type="button"
                            data-product-id="{{this.productID}}" data-order-id="{{this._id}}">Cancel</button>
                        {{/unless}}

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{{/unless}}
{{/each}}
{{/each}}
{{/if}}



<div style="position: absolute; background-color: rgb(240, 236, 236)" id="returnReasonForm">

    <form id="returnReasonFormsubmit">
        <h3 class="form-header">Why Are You Returning the Order?</h3>
        <hr>

        <div class="form-check">
            <input class="form-check-input" type="radio" name="returnReason" value="Product Quality Issue"
                id="qualityIssue">
            <label class="form-check-label" for="qualityIssue">
                Product Quality Issue
            </label>
        </div>

        <div class="form-check">
            <input class="form-check-input" type="radio" name="returnReason" value="Got Damaged When Received the Item"
                id="damagedOnReceipt">
            <label class="form-check-label" for="damagedProduct">
                Got Damaged When Received the Item
            </label>
        </div>

        <div class="form-check">
            <input class="form-check-input" type="radio" name="returnReason" value=" The Color is Not Matching"
                id="colorMismatch">
            <label class="form-check-label" for="colorMissmatch">
                The Color is Not Matching
            </label>
        </div>

        <div class="form-check">
            <input class="form-check-input" type="radio" name="returnReason" value="Product Not Working"
                id="notWorking">
            <label class="form-check-label" for="notWorking">
                Product Not Working
            </label>
        </div>

        <div class="form-outline mb-4" id="textAreaInput">
            <label class="form-label" for="form4Example3">Tell Us More About the Issue</label>
            <textarea class="form-control" id="issueDescription" name="returnReason" rows="4"></textarea>
        </div>

        <a href="#" class="returnItem btn border border-dark btn-primary mt-2" id="formSubmitClick"
            data-product-id="{{this._id}}">Return Item</a>

        <a href="/profile/my-orders" class="returnItem btn border border-dark btn-warning mt-2"
            id="formSubmitClick">Cancel</a>

    </form>
</div>


{{!-- {{>new-user-footer}} --}}


<script>

    $(document).ready(function () {
        $('.returnText').hide();
        $('.cancel-button').click(function () {

            const productID = $(this).data('product-id');
            const orderID = $('input[name="orderID"]').val();
            const proUniqueID = document.querySelector('input[name="proUniqueID"]').value;

            Swal.fire({
                title: 'Confirm Cancel',
                text: 'Are you sure you want to cancel the order ?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, Cancel !',
                cancelButtonText: 'No, Keep',
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/profile/my-orders/cancel-order/?productID=${productID}&orderID=${orderID}&uniqueID=${proUniqueID}`,
                        method: 'GET',
                        success: function (data) {
                            if (data.message) {
                                Swal.fire({
                                    title: "Order Canceled",
                                    text: "Order Canceled Successfully",
                                    icon: "success",
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                console.log("Order Cancellation Failed !");
                            }
                        },
                        error: function (error) {
                            console.error('Error canceling order:', error);
                        }
                    });
                }
            });
        });



        const statusButtons = $('.status-button');
        statusButtons.each(function () {
            const statusValue = $(this).text().trim();


            if (statusValue.toLowerCase() === 'delivered') {
                $(this).siblings('.returnItem').show();
            }
        });
    });


    function returnItem(orderId, productId) {
        Swal.fire({
            title: "Return Order",
            text: "Are you Sure you want to return this product ?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: 'Yes , Return',
        }).then((result) => {
            if (result.isConfirmed) {
                removeOrder(orderId, productId);
            }
        })
    }

    function removeOrder(orderId, productId) {

        const reasonForm = document.getElementById('returnReasonForm')
        reasonForm.style.display = 'block';

        $('#formSubmitClick').on('click', function () {
            submitReasonForm(orderId, productId);
        });
    }

    function submitReasonForm(orderId, productId) {
        const returnReason = document.querySelector('input[name="returnReason"]:checked').value;
        const issueDescription = document.getElementById('issueDescription').value;

        $.ajax({
            url: '/my-orders/returnItem/' + orderId + '/' + productId,
            method: "POST",
            data: {
                returnReason: returnReason,
                issueDescription: issueDescription
            },
            success: (response) => {
                if (response.message) {
                    Swal.fire({
                        title: "Return Successful",
                        text: "Product Return Confirmed",
                        icon: "success",
                    }).then(() => {
                        location.reload();
                    });
                }
            },
            error: (error) => {
                console.log("Error:", error);
                Swal.fire({
                    title: "Return Failed",
                    text: "There was an error while processing your return request.",
                    icon: "error",
                });
            },
        });
    }





</script>





<style>
    @media (max-width: 767.98px) {
        .border-sm-start-none {
            border-left: none !important;
        }
    }

    #statusBtn {
        border-radius: 10px;
        padding-bottom: 3px;
        background-color: white;
        border-color: green;
    }

    #returnReasonForm {
        width: 700px;
        top: 100px;
        left: 300px;
        display: none;
    }

    .form-header {
        margin-top: 10px;
        margin-left: 20px;
    }

    #textAreaInput {
        padding-left: 20px;
        padding-right: 20px;
        margin-top: 35px;
    }

    .form-check {
        margin-left: 20px;
        margin-top: 10px;
    }

    #formSubmitClick {
        margin-bottom: 10px;
        margin-left: 20px;
    }
</style>